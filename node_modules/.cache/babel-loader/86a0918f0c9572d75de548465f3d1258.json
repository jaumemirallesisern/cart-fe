{"ast":null,"code":"import { takeLatest, put, all, delay } from 'redux-saga/effects';\nimport { INCREMENT_COUNTER_REQUEST, incrementCounterAction, incrementCounterFailureAction, incrementCounterSuccessAction } from './actions'; // Extremely simple saga that's here just as an example\n\nexport function* incrementCounterSaga() {\n  try {\n    yield delay(1000);\n    yield put(incrementCounterAction());\n    yield put(incrementCounterSuccessAction());\n  } catch (e) {\n    yield put(incrementCounterFailureAction());\n    console.log('Failed incrementing a counter');\n  }\n}\nexport function* watchIncrementCounterSaga() {\n  yield all([takeLatest([INCREMENT_COUNTER_REQUEST], incrementCounterSaga)]);\n}","map":{"version":3,"sources":["/home/jaume/src/Projects/cart-fe/src/store/modules/counter/saga.ts"],"names":["takeLatest","put","all","delay","INCREMENT_COUNTER_REQUEST","incrementCounterAction","incrementCounterFailureAction","incrementCounterSuccessAction","incrementCounterSaga","e","console","log","watchIncrementCounterSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,KAA/B,QAA4C,oBAA5C;AACA,SACEC,yBADF,EAEEC,sBAFF,EAGEC,6BAHF,EAIEC,6BAJF,QAKO,WALP,C,CAOA;;AACA,OAAO,UAAUC,oBAAV,GAAiC;AACtC,MAAI;AACF,UAAML,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAACI,sBAAsB,EAAvB,CAAT;AACA,UAAMJ,GAAG,CAACM,6BAA6B,EAA9B,CAAT;AACD,GAJD,CAIE,OAAOE,CAAP,EAAU;AACV,UAAMR,GAAG,CAACK,6BAA6B,EAA9B,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD;AACF;AAED,OAAO,UAAUC,yBAAV,GAAsC;AAC3C,QAAMV,GAAG,CAAC,CACRF,UAAU,CAAC,CAAEI,yBAAF,CAAD,EAAgCI,oBAAhC,CADF,CAAD,CAAT;AAGD","sourcesContent":["import { takeLatest, put, all, delay } from 'redux-saga/effects';\nimport {\n  INCREMENT_COUNTER_REQUEST,\n  incrementCounterAction,\n  incrementCounterFailureAction,\n  incrementCounterSuccessAction\n} from './actions';\n\n// Extremely simple saga that's here just as an example\nexport function* incrementCounterSaga() {\n  try {\n    yield delay(1000);\n    yield put(incrementCounterAction());\n    yield put(incrementCounterSuccessAction());\n  } catch (e) {\n    yield put(incrementCounterFailureAction());\n    console.log('Failed incrementing a counter');\n  }\n}\n\nexport function* watchIncrementCounterSaga() {\n  yield all([\n    takeLatest([ INCREMENT_COUNTER_REQUEST ], incrementCounterSaga),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}